PGPASSWORD='postgres' psql   -h ecommerce-database.cz886ymow7q4.us-east-1.rds.amazonaws.com   -p 5432   -U postgres   -d postgres


sql
-- Corrected customers table for PostgreSQL
CREATE TABLE customers (
    customer_id SERIAL PRIMARY KEY,
    first_name VARCHAR(100) NOT NULL,
    last_name VARCHAR(100) NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    password_hash VARCHAR(255) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Create the authors table
CREATE TABLE authors (
    author_id SERIAL PRIMARY KEY,
    first_name VARCHAR(100) NOT NULL,
    last_name VARCHAR(100) NOT NULL
);

-- Create the categories table
CREATE TABLE categories (
    category_id SERIAL PRIMARY KEY,
    category_name VARCHAR(100) UNIQUE NOT NULL
);

-- Create the books table with a foreign key to authors
CREATE TABLE books (
    book_id SERIAL PRIMARY KEY,
    title VARCHAR(255) NOT NULL,
    author_id INT,
    publication_year INT,
    price DECIMAL(5, 2) NOT NULL,
    FOREIGN KEY (author_id) REFERENCES authors(author_id)
);

-- Create a linking table for books and categories (many-to-many)
CREATE TABLE books_categories (
    book_id INT,
    category_id INT,
    PRIMARY KEY (book_id, category_id),
    FOREIGN KEY (book_id) REFERENCES books(book_id),
    FOREIGN KEY (category_id) REFERENCES categories(category_id)
);

-- Create the orders table with a foreign key to customers
CREATE TABLE orders (
    order_id SERIAL PRIMARY KEY,
    customer_id INT,
    order_date DATE NOT NULL,
    status VARCHAR(50) NOT NULL,
    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)
);

-- Create the order_items table to track books in an order
CREATE TABLE order_items (
    order_item_id SERIAL PRIMARY KEY,
    order_id INT,
    book_id INT,
    quantity INT NOT NULL,
    FOREIGN KEY (order_id) REFERENCES orders(order_id),
    FOREIGN KEY (book_id) REFERENCES books(book_id)
);

-- Create the reviews table
CREATE TABLE reviews (
    review_id SERIAL PRIMARY KEY,
    book_id INT,
    customer_id INT,
    rating INT CHECK (rating >= 1 AND rating <= 5),
    review_text TEXT,
    review_date DATE NOT NULL,
    FOREIGN KEY (book_id) REFERENCES books(book_id),
    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)
);



sql
-- Insert sample data into the customers table
INSERT INTO customers (first_name, last_name, email, password_hash) VALUES
('John', 'Doe', 'john.doe@example.com', 'hashed_password_1'),
('Jane', 'Smith', 'jane.smith@example.com', 'hashed_password_2'),
('Peter', 'Jones', 'peter.jones@example.com', 'hashed_password_3');

-- Insert sample data into the authors table
INSERT INTO authors (first_name, last_name) VALUES
('Jane', 'Austen'),
('George', 'Orwell'),
('J.R.R.', 'Tolkien'),
('Stephen', 'King'),
('Haruki', 'Murakami');

-- Insert sample data into the categories table
INSERT INTO categories (category_name) VALUES
('Fiction'),
('Classic'),
('Fantasy'),
('Horror'),
('Dystopian');

-- Insert sample data into the books table
INSERT INTO books (title, author_id, publication_year, price) VALUES
('Pride and Prejudice', 1, 1813, 15.99),
('1984', 2, 1949, 12.50),
('The Hobbit', 3, 1937, 20.00),
('The Lord of the Rings', 3, 1954, 45.00),
('The Shining', 4, 1977, 18.75),
('Kafka on the Shore', 5, 2002, 22.00);

-- Insert sample data into the books_categories linking table
INSERT INTO books_categories (book_id, category_id) VALUES
(1, 1), (1, 2), -- Pride and Prejudice: Fiction, Classic
(2, 1), (2, 5), -- 1984: Fiction, Dystopian
(3, 1), (3, 3), -- The Hobbit: Fiction, Fantasy
(4, 1), (4, 3), -- The Lord of the Rings: Fiction, Fantasy
(5, 1), (5, 4), -- The Shining: Fiction, Horror
(6, 1), (6, 3); -- Kafka on the Shore: Fiction, Fantasy

-- Insert sample data into the orders table
INSERT INTO orders (customer_id, order_date, status) VALUES
(1, '2025-01-10', 'Shipped'),
(2, '2025-01-12', 'Processing'),
(1, '2025-01-15', 'Delivered'),
(3, '2025-01-15', 'Shipped');

-- Insert sample data into the order_items table
INSERT INTO order_items (order_id, book_id, quantity) VALUES
(1, 1, 1), -- John Doe ordered 1 'Pride and Prejudice'
(1, 3, 1), -- John Doe ordered 1 'The Hobbit'
(2, 5, 2), -- Jane Smith ordered 2 'The Shining'
(3, 2, 1), -- John Doe ordered 1 '1984'
(4, 6, 1), -- Peter Jones ordered 1 'Kafka on the Shore'
(4, 5, 1); -- Peter Jones ordered 1 'The Shining'

-- Insert sample data into the reviews table
INSERT INTO reviews (book_id, customer_id, rating, review_text, review_date) VALUES
(1, 1, 5, 'A timeless classic!', '2025-01-20'),
(2, 1, 4, 'Very thought-provoking.', '2025-01-22'),
(5, 2, 5, 'Terrifying and brilliant.', '2025-01-25'),
(3, 3, 5, 'Great for all ages.', '2025-01-25');


sql
-- Find all books with their categories and authors
SELECT
    b.title,
    a.first_name || ' ' || a.last_name AS author_name,
    c.category_name
FROM books b
JOIN authors a ON b.author_id = a.author_id
JOIN books_categories bc ON b.book_id = bc.book_id
JOIN categories c ON bc.category_id = c.category_id;

-- See a customer's order history, including book titles and quantities
SELECT
    c.first_name || ' ' || c.last_name AS customer_name,
    o.order_date,
    o.status,
    b.title AS book_title,
    oi.quantity
FROM customers c
JOIN orders o ON c.customer_id = o.customer_id
JOIN order_items oi ON o.order_id = oi.order_id
JOIN books b ON oi.book_id = b.book_id
ORDER BY c.customer_id, o.order_date;

-- Get the average rating for each book
SELECT
    b.title,
    AVG(r.rating) AS average_rating
FROM books b
JOIN reviews r ON b.book_id = r.book_id
GROUP BY b.title;